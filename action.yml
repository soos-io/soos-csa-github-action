name: "SOOS CSA"
author: "SOOS"
description: "The SOOS GitHub Action to perform Container Analysis."
branding:
  icon: "alert-triangle"
  color: "blue"
inputs:
  api_key:
    description: "SOOS API Key."
    required: true
  api_url:
    description: "SOOS API URL - Internal Use Only"
    required: true
    default: "https://api.soos.io/api/"
  branch_uri:
    description: 'Branch URI'
    required: false
    default: '${{ github.server_url }}/${{ github.repository }}/tree/${{ github.head_ref || github.ref_name }}'
  branch_name:
    description: 'Branch Name'
    required: false
    default: '${{ github.head_ref || github.ref_name }}'
  build_uri:
    description: 'Build URI'
    required: false
    default: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
  build_version:
    description: "Version of application build artifacts."
    required: false
    default: ""
  client_id:
    description: "SOOS Client ID."
    required: true
  export_format:
    description: "Export format."
    required: false
  export_file_type:
    description: "Export file type."
    required: false
  log_level:
    description: "Log level to show: DEBUG, INFO, WARN, FAIL, ERROR."
    required: false
    default: "INFO"
  on_failure:
    description: "Action to perform when the scan fails. Values available: fail_the_build, continue_on_failure (Default)"
    required: false
    default: "continue_on_failure"
  operating_environment:
    description: "System info regarding operating system, etc."
    required: false
    default: ${{ runner.os }}
  other_options:
    description: "Other Options to pass to Syft."
    required: false
  output_format:
    description: "DEPRECATED - parameter has no effect. Use export_format and export_file_type."
    required: false
  project_name:
    description: "The project name that will be displayed on the dashboard. By Default is owner/repository_name."
    required: true
    default: ${{ github.repository }}
  target_image:
    description: "The target to scan. Should be a docker image name or a path to a directory containing a Dockerfile."
    required: true
  image_tag:
    description: 'The soosio/csa image tag to use; defaults to latest'
    required: false
    default: 'latest'

runs:
  using: "composite"
  steps:
    - name: Check version
      shell: bash
      env:
        SOOS_ACTION_REF: ${{ github.action_ref }}
      run: |
        set +x  # Turn off command echoing
        printf '%.0s-' {1..80}
        printf '\n'
        response=$(curl -s https://api.github.com/repos/soos-io/soos-csa-github-action/releases/latest)
        if [ $? -eq 0 ]; then
          latest_tag=$(echo "$response" | grep -oP '"tag_name": "\K(.*)(?=")')
          current_tag=$(echo "$SOOS_ACTION_REF" | awk -F'/' '{print $NF}')
          latest_tag_major=$(echo "$latest_tag" | awk -F'.' '{print $1}')
          
          echo "Your current version is: $current_tag, The latest version is: $latest_tag_major"
          
          if [[ "$current_tag" != "$latest_tag_major"* ]]; then
            echo "This action is outdated or using a commit reference. Please update to use the latest major version tag: $latest_tag_major"
          elif [[ "$current_tag" == "$latest_tag" ]]; then
            echo "It is recommended to use the major version tag, $latest_tag_major when referencing this action."
          elif [[ "$current_tag" != "$latest_tag_major" ]]; then
            echo "This action is out of date. It is recommended to use the major version tag, $latest_tag_major."
          fi
        else 
          echo "Can't check version."
        fi
        printf '%.0s-' {1..80}
        printf '\n'

    - name: Set Arguments
      shell: bash
      env:
        SOOS_ACTION_REF: ${{ github.action_ref }}
      run: |
        set +x  # Turn off command echoing
        current_tag=$(echo "$SOOS_ACTION_REF" | awk -F'/' '{print $NF}')
        args="--integrationName=Github --integrationType=Plugin --appVersion=\"$current_tag\" "

        [ -n "${{ inputs.api_key }}" ] && args+="--apiKey=${{ inputs.api_key }} "
        [ -n "${{ inputs.api_scan_format }}" ] && args+="--apiScanFormat=${{ inputs.api_scan_format }} "
        [ -n "${{ inputs.api_url }}" ] && args+="--apiURL=${{ inputs.api_url }} "
        [ -n "${{ inputs.branch_name }}" ] && args+="--branchName=${{ inputs.branch_name }} "
        [ -n "${{ inputs.branch_uri }}" ] && args+="--branchURI=${{ inputs.branch_uri }} "
        [ -n "${{ inputs.build_uri }}" ] && args+="--buildURI=${{ inputs.build_uri }} "
        [ -n "${{ inputs.build_version }}" ] && args+="--buildVersion=${{ inputs.build_version }} "
        [ -n "${{ inputs.client_id }}" ] && args+="--clientId=${{ inputs.client_id }} "
        [ -n "${{ inputs.export_format }}" ] && args+="--exportFormat=\"${{ inputs.export_format }}\" "
        [ -n "${{ inputs.export_file_type }}" ] && args+="--exportFileType=\"${{ inputs.export_file_type }}\" "
        [ -n "${{ inputs.log_level }}" ] && args+="--logLevel=${{ inputs.log_level }} "
        [ -n "${{ inputs.on_failure }}" ] && args+="--onFailure=${{ inputs.on_failure }} "
        [ -n "${{ inputs.operating_environment }}" ] && args+="--operatingEnvironment=${{ inputs.operating_environment }} "
        [ -n "${{ inputs.other_options }}" ] && args+="--otherOptions=\"${{ inputs.other_options }}\" "
        [ -n "${{ inputs.output_format }}" ] && args+="--outputFormat=\"${{ inputs.output_format }}\" "
        [ -n "${{ inputs.project_name }}" ] && args+="--projectName=\"${{ inputs.project_name }}\" "

        [ -n "${{ inputs.target_image }}" ] && args+="${{ inputs.target_image }}"

        echo "Arguments: $args"

        echo "args=$args" >> $GITHUB_ENV

    - name: Run SOOS Container Scan
      shell: bash
      run: |
        docker pull soosio/csa:${{ inputs.image_tag }}
        eval "docker run -v ${{ github.workspace }}:/usr/src/app/:rw --rm soosio/csa:${{ inputs.image_tag }} $args"

